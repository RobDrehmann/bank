$colors: (
    background: #1d1f20,
    text: #eee
);

$font: (
    family: sans-serif,
    size: 24px,
    letter-spacing: 0
);

$config: (
    animated: false,
    nb-letters: 16,
    animation-length: 4s,
    mask-letters: ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
);

// ----------------------------------

@function color($value) {
    @return map-get($colors, $value);
}

@function font($value) {
    @return map-get($font, $value);
}

@function config($value) {
    @return map-get($config, $value);
}

@function random-string($list) {
    $result: null;
    @for $i from 1 through length($list) {
        $random: random(length($list));
        $current: nth($list, $random);
        $list: remove-nth($list, $random);
        $result: $result#{$current};
    }
    @return $result;
}

@function remove-nth($list, $index) {
    $result: ();
    @for $i from 1 through length($list) {
        @if $i != $index {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

@mixin respond-to($breakpoint) {
    @if type-of($breakpoint) == list {
        @media (min-width: nth($breakpoint, 1)) and (max-width: nth($breakpoint, 2)) {
            @content;
        }
    }
    @else {
        @media (max-width: $breakpoint) {
            @content;
        }
    }
}

.Header{
  height: 8vh;
  display: flex;
  justify-content: space-between;
  background-color: #204E4A;
  border-bottom: solid;
  border-color: #ECBA82;


  align-items: center;

}
.Header_right{
  display: flex;


}
.Header > h1{
  padding-left: .5vw;
 color: #ECBA82;

}

.button {
 margin-right: 35px;
	--offset: 10px;
	--border-size: 2px;
  width: 8vw;
  height: 3vh;
  display: block;
	position: relative;
  font-size: 1.2vw;
	appearance: none;
	border: 0;
	background: #204E4A;
	color: #ECBA82;
	letter-spacing: .25em;
	outline: none;
	cursor: pointer;
	font-weight: bold;
	border-radius: 0;
	box-shadow: inset 0 0 0 var(--border-size) #ECBA82;
	transition: background .8s ease;

	&:hover {
    color: #204E4A;
		background: #ECBA82;
	}

	&__horizontal,
	&__vertical {
		position: absolute;
		top: var(--horizontal-offset, 0);
		right: var(--vertical-offset, 0);
		bottom: var(--horizontal-offset, 0);
		left: var(--vertical-offset, 0);
		transition: transform .8s ease;
		will-change: transform;

		&::before {
			content: '';
			position: absolute;
			border: inherit;
		}
	}

	&__horizontal {
		--vertical-offset: calc(var(--offset) * -1);
		border-top: var(--border-size) solid #ECBA82;
		border-bottom: var(--border-size) solid #ECBA82;

		&::before {
			top: calc(var(--vertical-offset) - var(--border-size));
			bottom: calc(var(--vertical-offset) - var(--border-size));
			left: calc(var(--vertical-offset) * -1);
			right: calc(var(--vertical-offset) * -1);
		}
	}

	&:hover &__horizontal {
		transform: scaleX(0);
	}

	&__vertical {
		--horizontal-offset: calc(var(--offset) * -1);
		border-left: var(--border-size) solid #ECBA82;
		border-right: var(--border-size) solid #ECBA82;

		&::before {
			top: calc(var(--horizontal-offset) * -1);
			bottom: calc(var(--horizontal-offset) * -1);
			left: calc(var(--horizontal-offset) - var(--border-size));
			right: calc(var(--horizontal-offset) - var(--border-size));
		}
	}

	&:hover &__vertical {
		transform: scaleY(0);
	}

}
.wrapper {

  padding-left: 3vw;
    font-size: 0;

}



.letter {
    width: font(size);
    display: inline-block;
    vertical-align: middle;
    position: relative;
    overflow: hidden;
    margin: 0 ceil(font(letter-spacing) / 2);
    font-family: font(family);
    font-size: font(size);
    font-weight: 600;
    line-height: font(size);
    text-transform: uppercase;
    color: #ECBA82;
    @include respond-to(625px) {
        //font-size: 16px;
        //width: 18px;
    }
    &:before {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        word-break: break-all;
        background-color: #204E4A;
    }
}

// ----------------------------------

@for $i from 1 through config(nb-letters) {
    $length: length(config(mask-letters));
    $random: random($length);
    $steps: $random - 1;
    $offset: font(size) * $steps * -1;
    $delay: random(100) / 100;
      $duration: $steps * (config(animation-length) / $random);
    .letter:nth-child(#{$i}):before {
        content: quote(random-string(config(mask-letters)));
        margin-top: $offset;
        animation-name: letter#{$i};
        animation-duration: $duration - ($duration * $delay);
        animation-delay: $delay * 1s;
        animation-fill-mode: forwards;
    }
    @keyframes letter#{$i} {
        from {
            margin-top: $offset;
        }
        to {
            margin-top: font(size);
        }
    }
}
